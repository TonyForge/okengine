<?xml version="1.0" encoding="utf-8"?>
<shader name="FlatShaderMorphSkin">

  <properties>
    <transparent enabled="false" />
    <blend enabled="true" template_file="Blend.DefaultAlpha.xml"/>
    <cull enabled="true" face="GL_BACK" />
    <depth enabled="true" depth_mask="GL_TRUE" depth_func="GL_GREATER"/>
  </properties>
  
  <aliases>
    <alias uniform="vp0" type="mat4" ref="ViewProjectionMatrix" />
	<alias uniform="morph_blend_0" type="float" ref="Callback" />
	<alias uniform="morph_blend_1" type="float" ref="Callback" />
	<alias uniform="morph_blend_2" type="float" ref="Callback" />
	<alias uniform="morph_blend_3" type="float" ref="Callback" />
	<alias uniform="bones[0]" type="mat4_array" ref="Bones" />
  </aliases>
  
  <vertex>
    <![CDATA[
    #version 330 core
	
    #define _SKIN_ENABLED_
	#define _MORPH_ENABLED_
	
	#ifdef _SKIN_ENABLED_
	const int MAX_BONES = 20; 
	#endif
	
    layout (location = 0) in vec3 pos0;
    layout (location = 1) in vec2 uv0;
	layout (location = 2) in vec3 nrm0;
	
	#ifdef _SKIN_ENABLED_
	layout (location = 3) in vec4 bones_weights;
	layout (location = 4) in vec4 bones_indexes;
	#endif
	
	#ifdef _MORPH_ENABLED_
	layout (location = 5) in vec3 morph_0_pos;
	layout (location = 6) in vec3 morph_1_pos;
	layout (location = 7) in vec3 morph_2_pos;
	layout (location = 8) in vec3 morph_3_pos;
	layout (location = 9) in vec3 morph_0_nrm;
	layout (location = 10) in vec3 morph_1_nrm;
	layout (location = 11) in vec3 morph_2_nrm;
	layout (location = 12) in vec3 morph_3_nrm;
	#endif

    out vec2 uv0_out;
	out vec3 nrm_out;
	
    uniform mat4 vp0;
	
	#ifdef _SKIN_ENABLED_
	uniform mat4 bones[MAX_BONES];
	#endif
	
	#ifdef _MORPH_ENABLED_
	uniform float morph_blend_0;
	uniform float morph_blend_1;
	uniform float morph_blend_2;
	uniform float morph_blend_3;
	#endif
	
    void main()
    {
	vec3 deformed_position = pos0;
	vec3 deformed_normal = nrm0;
	
	#ifdef _MORPH_ENABLED_
		  deformed_position = deformed_position + (morph_0_pos * morph_blend_0 + morph_1_pos * morph_blend_1 + morph_2_pos * morph_blend_2 + morph_3_pos * morph_blend_3);
		  deformed_normal = normalize(deformed_normal + (morph_0_nrm * morph_blend_0 + morph_1_nrm * morph_blend_1 + morph_2_nrm * morph_blend_2 + morph_3_nrm * morph_blend_3));
	#endif
	  
	#ifdef _SKIN_ENABLED_
		vec4 skinned_position = vec4(deformed_position, 1.0);
		vec4 skinned_normal = vec4(deformed_normal, 0.0);
		mat4 bone;
		
		ivec4 bone_index = ivec4(round(bones_indexes));
		vec4 bones_weights_normalized = bones_weights + bones_weights * clamp(bone_index, -1, 0);
		float bones_weights_sum = bones_weights_normalized.x + bones_weights_normalized.y + bones_weights_normalized.z + bones_weights_normalized.w;
		
		bones_weights_normalized /= bones_weights_sum;

		bone = 	bones[bone_index.x] * bones_weights_normalized.x + 
				bones[bone_index.y] * bones_weights_normalized.y +
				bones[bone_index.z] * bones_weights_normalized.z +
				bones[bone_index.w] * bones_weights_normalized.w;
		
		skinned_position = bone * skinned_position;
		
		vec4 normal_fix = vec4(
		1.0 / dot(bone[0].xyz,bone[0].xyz),
		1.0 / dot(bone[1].xyz,bone[1].xyz),
		1.0 / dot(bone[2].xyz,bone[2].xyz),
		0.0);
		
		skinned_normal = normalize(bone * (skinned_normal * normal_fix));
		
		deformed_position = skinned_position.xyz;
		deformed_normal = skinned_normal.xyz;
	#endif

		gl_Position = vp0 * vec4(deformed_position.xyz, 1.0);
		
		nrm_out = deformed_normal;
		
		uv0_out = vec2(uv0.x, 1.0 - uv0.y);
    }
    ]]>
  </vertex>
  
  <fragment>
    <![CDATA[
    #version 330 core
    out vec4 FragColor;
    
    in vec2 uv0_out;
	in vec3 nrm_out;
	
    uniform sampler2D tex0;
    
    void main()
    {
      FragColor = texture(tex0, uv0_out);
	  FragColor.rgb = nrm_out;
    }
    ]]>
  </fragment>
  
  <geometry>
    <![CDATA[]]>
  </geometry>
</shader>