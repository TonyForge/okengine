<?xml version="1.0" encoding="utf-8"?>
<shader name="PlanetShader">

  <properties>
    <transparent enabled="false" />
    <blend enabled="true" template_file="Blend.DefaultAlpha.xml"/>
    <cull enabled="false" />
    <depth enabled="false" />
  </properties>
  
  <aliases>
    <alias uniform="mvp0" type="mat4" ref="ModelViewProjectionMatrix" />
	<alias uniform="default_z" type="float" ref="Callback" />
  </aliases>
  
  <vertex>
    <![CDATA[
    #version 330 core
    layout (location = 0) in vec2 pos0;
    layout (location = 1) in vec2 uv0;
    layout (location = 2) in vec4 color0;
    
    out vec2 uv0_out;
    out vec4 color0_out;
    
    uniform mat4 mvp0;
    uniform float default_z;
    
    void main()
    {
      gl_Position = mvp0 * vec4(pos0.xy, default_z, 1.0);
      uv0_out = uv0;
      color0_out = color0;
    }
    ]]>
  </vertex>
  
  <fragment>
    <![CDATA[
    #version 330 core
    out vec4 FragColor;
    
    in vec2 uv0_out;
    in vec4 color0_out;
    
    uniform sampler2D tex0;
	
    void main()
    {
      FragColor = texture(tex0, uv0_out);
	  vec2 uv_sph = vec2(color0_out.x,color0_out.y)+(FragColor.rg)*0.5;
	  
	  vec2 uv1 = (uv0_out-vec2(0.5,0.5))*2.0;
	  float planet_mask = 1.0-smoothstep(0.97,1.0,length(uv1));
	  
	  vec4 planet_color = step(0.5,texture(tex0, uv_sph));
	  
      FragColor.rgb = planet_color.bbb;//mix(planet_color.bbb, color0_out.rgb, color0_out.a*0.001);
	  FragColor.a = planet_mask;
    }
    ]]>
  </fragment>
  
  <geometry>
    <![CDATA[]]>
  </geometry>
</shader>